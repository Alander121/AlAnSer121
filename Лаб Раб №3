using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    class Program
    {
        static void Main(string[] args)
        {
            double x, y, z;
            Console.Write("Введите длину: ");
            string str1 = Console.ReadLine();
            bool w = double.TryParse(str1, out x);
            if (!w || x < 0)
            {
                while (!w || x < 0)
                {
                    str1 = Console.ReadLine();
                    w = double.TryParse(str1, out x);
                }
            }
            Console.Write("\nВведите ширину: ");
            string str2 = Console.ReadLine();
            w = double.TryParse(str2, out y);
            if (!w || y < 0)
            {
                while (!w || y < 0)
                {
                    str2 = Console.ReadLine();
                    w = double.TryParse(str2, out y);
                }
            }
            Console.Write("\nВведите высоту: ");
            string str3 = Console.ReadLine();
            w = double.TryParse(str3, out z);
            if (!w)
            {
                while (!w)
                {
                    str3 = Console.ReadLine();
                    w = double.TryParse(str3, out z);
                }
            }
            Rectangle a = new Rectangle(x, y, z);
            a.decision(x);
            double a1;
            Console.Write("\nВведите сторону: ");
            string str4 = Console.ReadLine();
            w = double.TryParse(str4, out a1);
            if (!w || a1 < 0)
            {
                while (!w || a1 < 0)
                {
                    str4 = Console.ReadLine();
                    w = double.TryParse(str4, out a1);
                }
            }
            Square p = new Square(a1);
            p.decision(a1);
            double c;
            Console.Write("\nВведите радиус: ");
            string str5 = Console.ReadLine();
            w = double.TryParse(str5, out c);
            if (!w || c < 0)
            {
                while (!w || c < 0)
                {
                    str5 = Console.ReadLine();
                    w = double.TryParse(str5, out c);
                }
            }
            Circle l = new Circle(c);
            l.decision(c);
            Console.Write("\n");
            ArrayList q = new ArrayList();
            q.Add(a);
            q.Add(p);
            q.Add(l);
            q.Sort();
            foreach (var n in q) Console.WriteLine(n);
            Console.Write("\n");
            List<Figure> t = new List<Figure>();
            t.Add(a);
            t.Add(p);
            t.Add(l);
            t.Sort();
            foreach (var n in t) Console.WriteLine(n);
            Console.Write("\n");
            Matrix<Figure> m = new Matrix<Figure>(3, 3, 3, a);
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    for (int k = 0; k < 3; k++)
                    {
                        if (i == j && i == k)
                        {
                            m[i, j, k] = p;
                        }
                        if (i != j && i == 1)
                        {
                            m[i, j, k] = l;
                        }
                    }
                }
            }
            Console.WriteLine(m.GetType());
            Console.WriteLine(m.Equals(a));
            Console.WriteLine(m.ToString());
            SimpleStack<Figure> stack = new SimpleStack<Figure>();
            stack.Push(a);
            stack.Push(p);
            stack.Push(l);
            while (stack.Count > 0)
            {
                Figure f = stack.Pop();
                Console.WriteLine(f);
            }
            Console.ReadKey();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    interface IPrint
    {
        void Print();
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    abstract class Figure : IComparable
    {
        public double x;
        public double[] S = new double [3];
        public abstract double decision(double x);
        public override string ToString()
        {
            return "Объём = " + this.decision(x).ToString();
        }
        public int CompareTo(object obj)
        {
            Figure q = (Figure)obj;
            if (this.decision(x) < q.decision(x))
            {
                return -1;
            }
            else if (this.decision(x) == q.decision(x))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    class Rectangle : Figure, IPrint
    {
        double y, z;
        public Rectangle(double x, double y, double z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        public override double decision(double x)
        {
            S[0] = x * this.y * this.z;
            return S[0];
        }
        public void Print()
        {
            Console.Write("Длина = ");
            Console.Write(x);
            Console.Write(",Ширина = ");
            Console.Write(y);
            Console.Write(",");
            Console.WriteLine(this.ToString());
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    class Square : Figure, IPrint
    {
        public Square(double a)
        {
            this.x = a;
        }
        public override double decision(double a)
        {
            S[1] = a * a * a;
            return S[1];
        }
        public void Print()
        {
            Console.Write("Сторона = ");
            Console.Write(x);
            Console.Write(",");
            Console.WriteLine(this.ToString());
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    class Circle : Figure, IPrint
    {
        public Circle(double r)
        {
            this.x = r;
        }
        public override double decision(double r)
        {
            S[2] = 4 * r * r * r * Math.PI / 3;
            return S[2];
        }
        public void Print()
        {
            Console.Write("Радиус = ");
            Console.Write(x);
            Console.Write(",");
            Console.WriteLine(this.ToString());
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    public class Matrix<T>
    {
        /// <summary>
        /// Словарь для хранения значений
        /// </summary>
        Dictionary<string, T> _matrix = new Dictionary<string, T>();
        /// <summary>
        /// Количество элементов по горизонтали
        /// </summary>
        int maxX;
        /// <summary>
        /// Количество элементов по вертикали
        /// </summary>
        int maxY;
        /// <summary>
        /// Количество элементов по фронтали
        /// </summary>
        int maxZ;
        /// <summary>
        /// Пустой элемент, который возвращается если элемент с нужными координатами не был задан
        /// </summary>
        T nullElement;
        /// <summary>
        /// Конструктор
        /// </summary>
        public Matrix(int px, int py, int pz, T nullElementParam)
        {
            this.maxX = px;
            this.maxY = py;
            this.maxZ = pz;
            this.nullElement = nullElementParam;
        }
        /// <summary>
        /// Индексатор для доступа к данных
        /// </summary>
        public T this[int x, int y, int z]
        {
            get
            {
                CheckBounds(x, y, z);
                string key = DictKey(x, y, z);
                if (this._matrix.ContainsKey(key))
                {
                    return this._matrix[key];
                }
                else
                {
                    return this.nullElement;
                }
            }
            set
            {
                CheckBounds(x, y, z);
                string key = DictKey(x, y, z);
                this._matrix.Add(key, value);
            }
        }
        /// <summary>
        /// Проверка границ
        /// </summary>
        void CheckBounds(double x, double y, double z)
        {
            if (x < 0 || x >= this.maxX) throw new Exception("x=" + x + " выходит за границы");
            if (y < 0 || y >= this.maxY) throw new Exception("y=" + y + " выходит за границы");
            if (z < 0 || z >= this.maxZ) throw new Exception("z=" + z + " выходит за границы");
        }
        /// <summary>
        /// Формирование ключа
        /// </summary>
        string DictKey(int x, int y, double z)
        {
            return x.ToString() + "_" + y.ToString() + "_" + z.ToString();
        }
        /// <summary>
        /// Приведение к строке
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            //Класс StringBuilder используется для построения длинных строк
            //Это увеличивает производительность по сравнению с созданием и склеиванием большого количества обычных строк
            StringBuilder b = new StringBuilder();
            for (int k = 0; k < this.maxZ; k++)
            {
                for (int j = 0; j < this.maxY; j++)
                {
                    b.Append("[");
                    for (int i = 0; i < this.maxX; i++)
                    {

                        if (i > 0) b.Append("\t");
                        b.Append(this[i, j, k].ToString());
                    }
                    b.Append("]\n");
                }
            }
            return b.ToString();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    public class SimpleListItem<T>
    {
        /// <summary>
        /// Данные
        /// </summary>
        public T data { get; set; }
        /// <summary>
        /// Следующий элемент
        /// </summary>
        public SimpleListItem<T> next { get; set; }
        ///конструктор
        public SimpleListItem(T param)
        {
            this.data = param;
        }
    }
    /// <summary>
    /// Список
    /// </summary>
    public class SimpleList<T> : IEnumerable<T>
    where T : IComparable
    {
        /// <summary>
        /// Первый элемент списка
        /// </summary>
        protected SimpleListItem<T> first = null;
        /// <summary>
        /// Последний элемент списка
        /// </summary>
        protected SimpleListItem<T> last = null;
        /// <summary>
        /// Количество элементов
        /// </summary>
        public int Count
        {
            get
            {
                return _count;
            }
            protected set
            {
                _count = value;
            }
        }
        int _count;
        /// <summary>
        /// Добавление элемента
        /// </summary>
        /// <param name="element"></param>
        public void Add(T element)
        {
            SimpleListItem<T> newItem = new SimpleListItem<T>(element);
            this.Count++;
            //Добавление первого элемента
            if (last == null)
            {
                this.first = newItem;
                this.last = newItem;
            }
            //Добавление следующих элементов
            else
            {
                //Присоединение элемента к цепочке
                this.last.next = newItem;
                //Просоединенный элемент считается последним
                this.last = newItem;
            }
        }
        /// <summary>
        /// Чтение контейнера с заданным номером
        /// </summary>
        public SimpleListItem<T> GetItem(int number)
        {
            if ((number < 0) || (number >= this.Count))
            {
                //Можно создать собственный класс исключения
                throw new Exception("Выход за границу индекса");
            }
            SimpleListItem<T> current = this.first;
            int i = 0;
            //Пропускаем нужное количество элементов
            while (i < number)
            {
                //Переход к следующему элементу
                current = current.next;
                //Увеличение счетчика
                i++;
            }
            return current;
        }
        /// <summary>
        /// Чтение элемента с заданным номером
        /// </summary>
        public T Get(int number)
        {
            return GetItem(number).data;
        }
        /// <summary>
        /// Для перебора коллекции
        /// </summary>
        public IEnumerator<T> GetEnumerator()
        {
            SimpleListItem<T> current = this.first;
            //Перебор элементов
            while (current != null)
            {
                //Возврат текущего значения
                yield return current.data;
                //Переход к следующему элементу
                current = current.next;
            }
        }
        //Реализация обощенного IEnumerator<T> требует реализации необобщенного интерфейса
        //Данный метод добавляется автоматически при реализации интерфейса
        System.Collections.IEnumerator
        System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        /// <summary>
        /// Cортировка
        /// </summary>
        public void Sort()
        {
            Sort(0, this.Count - 1);
        }
        /// <summary>
        /// Реализация алгоритма быстрой сортировки
        /// </summary>
        /// <param name="low"></param>
        /// <param name="high"></param>
        private void Sort(int low, int high)
        {
            int i = low;
            int j = high;
            T x = Get((low + high) / 2);
            do
            {
                while (Get(i).CompareTo(x) < 0) ++i;
                while (Get(j).CompareTo(x) > 0) --j;
                if (i <= j)
                {
                    Swap(i, j);
                    i++; j--;
                }
            } while (i <= j);
            if (low < j) Sort(low, j);
            if (i < high) Sort(i, high);
        }
        /// <summary>
        /// Вспомогательный метод для обмена элементов при сортировке
        /// </summary>
        private void Swap(int i, int j)
        {
            SimpleListItem<T> ci = GetItem(i);
            SimpleListItem<T> cj = GetItem(j);
            T temp = ci.data;
            ci.data = cj.data;
            cj.data = temp;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3._33
{
    class SimpleStack<T> : SimpleList<T>
    where T : IComparable
    {
        public void Push(T element)
        {
            SimpleListItem<T> got = new SimpleListItem<T>(element);
		    got.data = element;
		    got.next = first;
		    first = got;
            Count++;
        }
        public T Pop()
        {
            SimpleListItem<T> current = first;
            if (current == null)
            {
                Console.WriteLine("Стек пуст.");
            }
            else
            {
                first = first.next;
                current.next = null;
                Count--;
            }
            return current.data;
        }
    }
}

